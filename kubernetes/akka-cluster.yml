---
apiVersion: "apps/v1"
kind: Deployment
metadata:
  name: "akka-sample-cluster-kubernetes-dns-java"
  labels:
    appName: "akka-sample-cluster-kubernetes-dns-java"
spec:
  replicas: 3
  selector:
    matchLabels:
      appName: "akka-sample-cluster-kubernetes-dns-java"
#update
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
 #update

  template:
    metadata:
      labels:
        appName: "akka-sample-cluster-kubernetes-dns-java"
    spec:
      restartPolicy: Always
      containers:
      - name: "akka-sample-cluster-kubernetes-dns-java"
        image: "akka-sample-cluster-kubernetes-dns-java:1.3.3.7"
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
        livenessProbe:
          httpGet:
            path: /alive
            port: 8080
        env:
        ports:
        - containerPort: 8558
          name: management
        volumeMounts: []
      volumes: []
---
#headless
apiVersion: v1
kind: Service
metadata:
  labels:
    appName: "akka-sample-cluster-kubernetes-dns-java"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: "akka-sample-cluster-kubernetes-dns-java-internal"
spec:
  ports:
  - name: management
    port: 8558
    protocol: TCP
    targetPort: 8558
  selector:
    appName: "akka-sample-cluster-kubernetes-dns-java"
  clusterIP: None
  publishNotReadyAddresses: true
#headless
---
#public
apiVersion: v1
kind: Service
metadata:
  labels:
    appName: "akka-sample-cluster-kubernetes-dns-java"
  name: "akka-sample-cluster-kubernetes-dns-java"
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    appName: "akka-sample-cluster-kubernetes-dns-java"
  type: LoadBalancer
#public
